{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/mrbug/projects/mobile/tracks/src/components/App.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nvar Stack = createStackNavigator();\nimport CreateTrack from \"../screens/CreateTrack\";\nimport LoginScreen from \"../screens/LoginScreen\";\nimport RegisterScreen from \"../screens/RegisterScreen\";\nimport TrackDetail from \"../screens/TrackDetail\";\nimport TrackLIst from \"../screens/TrackLIst\";\nimport AccountScreen from \"../screens/AccountScreen\";\nimport { Provider as AuthProvider } from \"../context/AuthContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nvar Navigator = Stack.Navigator,\n    Screen = Stack.Screen;\nexport default function App() {\n  var LoggedIn = [{\n    name: \"CreateTrack\",\n    component: CreateTrack,\n    options: {}\n  }, {\n    name: \"TrackDetail\",\n    component: TrackDetail,\n    options: {}\n  }, {\n    name: \"TrackList\",\n    component: TrackLIst,\n    options: {\n      title: \"Truck\",\n      headerLeft: null\n    }\n  }, {\n    name: \"AccountScreen\",\n    component: AccountScreen,\n    options: {}\n  }, {\n    name: \"RegisterScreen\",\n    component: RegisterScreen,\n    options: {\n      title: \"Register\"\n    }\n  }, {\n    name: \"LoginScreen\",\n    component: LoginScreen,\n    options: {\n      title: \"Login\",\n      headerLeft: null\n    }\n  }];\n\n  var _useState = useState(\"true\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      fetching = _useState2[0],\n      setFetching = _useState2[1];\n\n  var state = useContext(AuthContext);\n\n  var getToken = function getToken() {\n    return _regeneratorRuntime.async(function getToken$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\").then(function (value) {\n              return value;\n            }));\n\n          case 2:\n            setFetching(false);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (fetching) {\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 10\n      }\n    }, \"fetching\");\n  } else {\n    return React.createElement(Navigator, {\n      initialRouteName: getToken ? \"TrackList\" : \"RegisterScreen\",\n      headerMode: \"screen\",\n      screenOptions: {\n        headerTintColor: 'white',\n        headerStyle: {\n          backgroundColor: \"black\",\n          color: \"white\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 4\n      }\n    }, LoggedIn.map(function (temp, index) {\n      return React.createElement(Screen, {\n        name: temp.name,\n        key: index,\n        component: temp.component,\n        options: temp.options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 6\n        }\n      });\n    }));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/mrbug/projects/mobile/tracks/src/components/App.js"],"names":["React","useContext","useState","useEffect","NavigationContainer","createStackNavigator","Stack","CreateTrack","LoginScreen","RegisterScreen","TrackDetail","TrackLIst","AccountScreen","Provider","AuthProvider","Context","AuthContext","Navigator","Screen","App","LoggedIn","name","component","options","title","headerLeft","fetching","setFetching","state","getToken","AsyncStorage","getItem","then","value","headerTintColor","headerStyle","backgroundColor","color","map","temp","index","styles","StyleSheet","create","container","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useContext, useState ,useEffect} from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nconst Stack = createStackNavigator();\nimport CreateTrack from \"../screens/CreateTrack\";\nimport LoginScreen from \"../screens/LoginScreen\";\nimport RegisterScreen from \"../screens/RegisterScreen\";\nimport TrackDetail from \"../screens/TrackDetail\";\nimport TrackLIst from \"../screens/TrackLIst\";\nimport AccountScreen from \"../screens/AccountScreen\";\nimport { Provider as AuthProvider } from \"../context/AuthContext\"\nimport { Context as AuthContext } from \"../context/AuthContext\"\n\nconst { Navigator, Screen } = Stack;\n// import AsyncStorage from \"@react-native-community/async-storage\"\n\nexport default function App() {\n\tconst LoggedIn = [\n\t\t{ name: \"CreateTrack\", component: CreateTrack, options: {} },\n\t\t{ name: \"TrackDetail\", component: TrackDetail, options: {} },\n\t\t{ name: \"TrackList\", component: TrackLIst, options: { title: \"Truck\", headerLeft: null } },\n\t\t{ name: \"AccountScreen\", component: AccountScreen, options: {} },\n\t\t{ name: \"RegisterScreen\", component: RegisterScreen, options: { title: \"Register\" } },\n\t\t{ name: \"LoginScreen\", component: LoginScreen, options: { title: \"Login\", headerLeft: null } },\n\t]\n\tconst [fetching, setFetching] = useState(\"true\")\n\tconst state = useContext(AuthContext);\n\n\tvar getToken = async () => {\n\t\tawait AsyncStorage.getItem(\"token\").then((value) => value);\n\t\tsetFetching(false)\n\t}\n\n\n\n\tif (fetching) {\n\t\treturn <Text>fetching</Text>\n\t} else {\n\t\treturn (\n\t\t\t<Navigator initialRouteName={getToken ? \"TrackList\" : \"RegisterScreen\"} headerMode=\"screen\" screenOptions={{ headerTintColor: 'white', headerStyle: { backgroundColor: \"black\", color: \"white\" }, }}>\n\t\t\t\t{LoggedIn.map((temp, index) => (\n\t\t\t\t\t<Screen name={temp.name} key={index} component={temp.component} options={temp.options} />\n\t\t\t\t))}\n\t\t\t</Navigator>\n\t\t);\n\t}\n\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#fff',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}